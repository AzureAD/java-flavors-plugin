plugins {
	id 'jacoco'
	id 'com.github.kt3k.coveralls' version '2.8.2'
	id 'groovy'
	id 'maven-publish'
	id 'java-gradle-plugin'
	id "com.gradle.plugin-publish" version "0.15.0"
}

group = 'com.microsoft'
version = file('version.txt').text.trim()

repositories {
	mavenCentral()
}

configurations {
	jacocoRuntime
}

dependencies {
	testImplementation 'junit:junit:4.12'
	testImplementation 'org.mockito:mockito-all:1.10.19'
	testImplementation('org.spockframework:spock-core:1.2-groovy-2.5') {
		exclude module: 'groovy-all'
	}
	testRuntimeOnly files("$buildDir/testkit")
	jacocoRuntime "org.jacoco:org.jacoco.agent:${jacoco.toolVersion}:runtime"
}

jacocoTestReport {
	reports {
		xml.enabled = true
		html.enabled = true
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

test {
	testLogging {
		exceptionFormat = 'full'
	}
	beforeTest { TestDescriptor descriptor ->
		logger.lifecycle("Running test: $descriptor.name")
	}
	dependsOn 'createTestkitFiles'
}

task createTestkitFiles {
	def outputDir = file("$buildDir/testkit")

	inputs.files sourceSets.main.runtimeClasspath
	inputs.files configurations.jacocoRuntime
	outputs.dir outputDir

	doLast {
		outputDir.mkdirs()
		String propString = "org.gradle.jvmargs=-javaagent:${configurations.jacocoRuntime.asPath}=destfile=$buildDir/jacoco/test.exec".replace('\\', '/')
		file("$outputDir/testkit-gradle.properties").text = propString
	}
}

pluginBundle {
	website = 'https://github.com/AzureAD/java-flavors-plugin'
	vcsUrl = 'https://github.com/AzureAD/java-flavors-plugin'
	tags = ['javaflavour', 'buildVariants']
}

gradlePlugin {
	plugins {
		javaFlavours {
			id = 'com.microsoft.javaflavours'
			displayName = 'Add Android Style flavours to your java projects'
			description = 'A plugin that adds Android style flavours to your java projects'
			implementationClass = 'com.microsoft.javaflavours.JavaFlavoursPlugin'
		}
	}
}

tasks.publish.dependsOn(build)

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}
